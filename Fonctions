# -*- coding: utf8 -*-
import pygame
from Variable_Init import *
from random import *
def spawn (temps_mini,intervalle,image,vitesse,time_since_last_spawn,liste_mob= [],liste_shot=[],Shot = 0):
    """Cette fonction fait apparaitre un enemi en fonction des arguments donnés """
    if pygame.time.get_ticks()>=temps_mini+temps_depuis_derniere_mort and pygame.time.get_ticks()>time_since_last_spawn+intervalle:
        time_since_last_spawn=pygame.time.get_ticks()
        position_mob = randrange(20,516,42)
        monstre = objet(image,0,vitesse,position_mob)
        liste_mob.append(monstre)
        if Shot == 1:
            shooter_shot = objet(image_shot,0,4,position_mob+45)
            liste_shot.append(shooter_shot)
        elif Shot == 2:
            shooter_shot = objet(image_shot2,0,5,position_mob+32)
            liste_shot.append(shooter_shot)
    return liste_mob , liste_shot ,time_since_last_spawn

def Mouvement(liste,liste_rect,limite,vie,degat =False,bas= True):
    """Cette fonction permet de faire bouger tout les élements à l'écran à l'exception du vaisseau"""
    liste_rect=[]
    for i in liste:
        i.move()
        liste_rect.append(i.pos)
        if i.pos.top >= limite and bas==True and degat ==True:
            touche.play
            vie=vie-1
            liste.pop(0)
           
        elif i.pos.top >=limite and bas==True:
            liste.pop(0)
        elif i.pos.top <= limite and bas==False and degat==True:
            touche.play
            vie=vie-1
            liste.pop(0)
        elif i.pos.top <= limite and bas==False :
            liste.pop(0)
    return liste ,liste_rect,vie
def Collision(rect,liste_rect,liste,vie,degat=False,rect_liste=False,j= 0,liste_2=[],bonus= False, liste_bonus =liste_bonus):
 """Cette fonction permet de calculer les collisions entre des élements et le cas écheant les supprimer"""
 try:
     liste_supr=[]
     liste_supr_2=[]
     collision = False
     hit = rect.collidelist(liste_rect)
     if hit != -1:
          liste_supr.append(hit)
          collision = True
          if rect_liste == True:
               liste_supr_2.append(j)
          if bonus == True:
              if randrange(1,30,1) <= 5:
                  liste_bonus.append(liste_rect[hit])
     for l in range(0,len(liste_supr)):
          liste[liste_supr[l]]=-42
     for l in range(0,liste.count(-42)):
          liste.remove(-42)
          if degat== True:
               vie=vie-1
               touche.play()
     if rect_liste==True:
          for l in range(0,len(liste_supr_2)):
               liste_2[liste_supr_2[l]]=-42
          for l in range(0,liste_2.count(-42)):
               liste_2.remove(-42)
               if degat== True:
                   touche.play()
                    vie=vie-1
          return liste,liste_2,vie,liste_bonus,collision
     else:
          return liste,vie,collision
 except:
     if rect_liste == True:
         return liste,liste_2,vie,liste_bonus,collision
     else:
         return liste,vie,collision

def Affichage(liste):
 """Cette fonction permet d'afficher les élements donnés en argument à l'écran"""
 for o in liste:
        fenetre.blit(o.image, o.pos)
def Init():
    """Fonction qui remet les valeurs initiales des différents elements avant chaque partie"""
    global Vaisseau_rect,liste_tir,liste_mob,liste_shot,liste_rect_tir,liste_rect_mob,liste_rect_shot,vie,keys,timer,temps,tps_mob,tps_fastmob,tps_shooter,temps_depuis_derniere_mort,liste_rect_heal,liste_rect_shotspeedup,liste_rect_bombe,liste_bonus,liste_heal,liste_shotspeedup,liste_bombe,vitesse_tir
    Vaisseau_rect.left=268
    Vaisseau_rect.top=736
    fenetre.blit(Vaisseau,Vaisseau_rect)
    #On reset toute les listes
    liste_tir =[]
    liste_mob =[]
    liste_shot =[]
    liste_rect_tir=[]
    liste_rect_mob=[]
    liste_rect_shot=[]
    
    liste_rect_heal =[]
    liste_rect_shotspeedup =[]
    liste_rect_bombe=[]
    liste_bonus = []
    liste_heal= []
    liste_shotspeedup=[]
    liste_bombe = []
    
    #On remet le nombre de vie
    vie = 3
    #On reset les inputs
    keys = [False, False, False]

    timer=pygame.time.Clock()
    temps_depuis_derniere_mort=pygame.time.get_ticks()

    vitesse_tir = 500

    temps=pygame.time.get_ticks()
    tps_mob=pygame.time.get_ticks()
    tps_fastmob=pygame.time.get_ticks()
    tps_shooter=pygame.time.get_ticks()
    return Vaisseau_rect,liste_tir,liste_mob,liste_shot,liste_rect_tir,liste_rect_mob,liste_rect_shot,vie,keys,timer,temps,tps_mob,tps_fastmob,tps_shooter,temps_depuis_derniere_mort,liste_rect_heal,liste_rect_shotspeedup,liste_rect_bombe,liste_bonus,liste_heal,liste_shotspeedup,liste_bombe,vitesse_tir

class objet:
    """Cette classe définit tout les élements se déplaceant dans le sens vertical"""
    def __init__(self, image, hauteur, vitesse,x):
        self.vitesse = vitesse
        self.image = image
        self.pos = image.get_rect().move(x, hauteur)
        
    def move(self):
        """cette fonction fait bouger l'objet auquel il est associé"""
        self.pos = self.pos.move(0, self.vitesse)
